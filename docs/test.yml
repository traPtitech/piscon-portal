openapi: 3.0.0
info:
  title: linq
  version: '1.0'
  contact:
    name: hackathon21spring-05
    url: 'https://github.com/hackathon21spring-05'
  description: linq API
servers:
  - url: 'http://localhost:3000/api'
    description: local
tags:
  - name: oauth
  - name: user
  - name: entry
  - name: search
paths:
  /oauth/callback:
    parameters:
      - name: code
        in: query
        required: true
        description: OAuth2.0のcode
        schema:
          type: string
    get:
      tags:
        - oauth
      summary: OAuthのコールバック
      description: OAuthのコールバック
      operationId: callback
      responses:
        "200":
          description: 成功
        "302":
          description: 失敗時。認証ページへリダイレクト
  /oauth/generate/code:
    post:
      tags:
        - oauth
      summary: OAuthのcode_challengeとかの取得
      description: OAuthのcode_challengeとかの取得
      operationId: getGeneratedCode
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Code'
        "500":
          description: サーバー内エラー
  /oauth/logout:
    post:
      tags:
        - oauth
      summary: ログアウト
      description: ログアウト
      operationId: postLogout
      responses:
        "200":
          description: 成功
        "500":
          description: サーバー内エラー
  /users/me:
    get:
      tags:
        - user
      summary: 自分の情報の取得
      description: 自分の情報の取得
      operationId: getMe
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "500":
          description: サーバー内エラー
  /users/bookmark:
    get:
      tags:
        - user
      summary: 自分のブックマーク一覧を取得
      description: 自分のブックマーク一覧を取得
      operationId: getBookmark
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryDetail'
        "500":
          description: サーバー内エラー
  /entry:
    get:
      tags:
        - entry
      summary: entry一覧を取得
      description: entry一覧を取得
      operationId: getEntry
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryDetail'
        "500":
          description: サーバー内エラー 
    put:
      tags:
        - entry
      summary: entryを更新
      description: ブックマークの追加．DBに記事が保存されていなければ追加．tagsの中身を記事のタグに追加（タグの削除は行わない）
      operationId: putEntry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Entry'
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntryDetail'
        "500":
          description: サーバー内エラー
  /hot:
    get:
      tags:
        - entry
      summary: 週間熱いやつの10個を追加
      description: 週間熱いやつの10個を追加
      operationId: getHotEntry
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryDetail'
        "500":
          description: サーバー内エラー
  /entry/{entryId}/tag/{tag}:
    post:
      tags:
        - entry
      summary: tagを追加
      description: タグを追加する
      operationId: postTags
      parameters:
      - name: "entryId"
        in: "path"
        description: "変更したい記事のId (urlのsha256ハッシュ)"
        schema:
          type: string
        required: true
      - name: "tag"
        in: "path"
        description: "追加したいタグの名前"
        schema:
          type: string
        required: true
      responses:
        "201":
          description: created
        "404":
          description: Not Found（entryIdが存在しない場合）
        "500":
          description: サーバー内エラー
    delete:
      tags:
        - entry
      summary: tagを削除する
      description: タグを削除する．タグが存在しなかった場合204を返します
      operationId: deleteTags
      parameters:
      - name: "entryId"
        in: "path"
        description: "変更したい記事のId (urlのsha256ハッシュ)"
        schema:
          type: string
        required: true
      - name: "tag"
        in: "path"
        description: "追加したいタグの名前"
        schema:
          type: string
        required: true
      responses:
        "204":
          description: 	No Content 削除
        "404":
          description: Not Found（entryIdが存在しない場合）
        "500":
          description: サーバー内エラー
  /entry/{entryId}:
    get:
      tags:
        - entry
      summary: 記事詳細情報の取得
      description: 記事詳細情報の取得
      operationId: getEntryDetail
      parameters:
      - name: "entryId"
        in: "path"
        description: "記事のId (urlのsha256ハッシュ)"
        schema:
          type: string
        required: true
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntryDetail"
        "404":
          description: Not Found（entryIdが存在しない場合）
        "500":
          description: サーバー内エラー
  /entry/{entryId}/bookmark:
    delete:
      tags:
        - entry
      summary: ブックマークの削除
      description: ブックマークの削除
      operationId: deleteBookmark
      parameters:
      - name: "entryId"
        in: "path"
        description: "記事のId (urlのsha256ハッシュ)"
        schema:
          type: string
        required: true
      responses:
        "204":
          description: No Content 削除
        "404":
          description: Not Found（entryIdが存在しない場合）
        "500":
          description: サーバー内エラー
      
  /search:
    get:
      tags:
        - search
      summary: 検索
      description: タグ検索（完全一致）
      operationId: getSearchEntry
      parameters:
      - name: "tag"
        in: "query"
        description: "tagの名前"
        schema:
          type: string
        required: true
      responses:
        "200":
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntryDetail'
        "500":
          description: サーバー内エラー
components:
  schemas:
    Entry:
      description: 記事
      allOf:
        - type: object
          properties:
            url:
              type: string
            tags:
              $ref: "#/components/schemas/Tags"
      required:
        - url
    EntryDetail:
      description: 記事
      type: object
      properties:
        id:
          description: urlのsha256
          type: string
          example: e31187b4e8fcee4c843d2bd4598879d1cfcc73275241fe5479d7c6851a83f529
        url:
          description: url
          type: string
          example: https://material.angular.io
        title:
          description: タイトル
          type: string
          example: hatenablog
        caption:
          description: キャプション
          type: string
          example: hatenablog
        thumbnail:
          description: サムネイルのURL
          type: string
          example: https://material.angular.io/assets/img/site-preview.png
        count:
          description: ブックマーク数
          type: integer
          example: 2
        created_at: 
          type: string
          format: date-time
          example: "2021-06-16T12:52:47.532Z"
        tags:
          $ref: "#/components/schemas/Tags"
        isBookmark:
          type: boolean
          example: true
      required:
        - id
        - url
        - title
        - count
        - isBookmark
    User:
      description: ユーザー
      type: object
      properties:
        id:
          description: traQのID（UUID）
          type: string
          example: toshi00
        name:
          description: traQID（UUIDでない方）
          type: string
          example: 060db77b-1d04-4686-a5ec-15c960159646
      required:
        - id
        - name
    Tags:
      type: array
      items:
        type: string
      example:
        - React
        - Vue
    Code:
      description: OAuthのコード
      type: object
      properties:
        codeChallenge:
          type: string
        codeChallengeMethod:
          type: string
        clientID:
          type: string
        responseType:
          type: string
      required:
        - codeChallenge
        - codeChallengeMethod
        - clientID
        - responseType